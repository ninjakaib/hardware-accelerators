// Generated automatically via PyRTL
// As one initial test of synthesis, map to FPGA with:
//   yosys -p "synth_xilinx -top toplevel" thisfile.v

module toplevel(clk, rst, leading_zeros, mantissa_product, unbiased_exp, out8080, out8084);
    input clk;
    input rst;
    input[7:0] leading_zeros;
    input[15:0] mantissa_product;
    input[7:0] unbiased_exp;
    output[6:0] out8080;
    output[7:0] out8084;

    wire const_1645_0;
    wire const_1646_1;
    wire const_1647_0;
    wire const_1648_1;
    wire const_1649_0;
    wire const_1650_0;
    wire[15:0] tmp7988;
    wire[14:0] tmp7989;
    wire[15:0] tmp7990;
    wire[14:0] tmp7991;
    wire[15:0] tmp7992;
    wire[15:0] tmp7993;
    wire tmp7994;
    wire[15:0] tmp7995;
    wire[1:0] tmp7996;
    wire[1:0] tmp7997;
    wire[13:0] tmp7998;
    wire[15:0] tmp7999;
    wire[13:0] tmp8000;
    wire[15:0] tmp8001;
    wire[15:0] tmp8002;
    wire tmp8003;
    wire[15:0] tmp8004;
    wire[3:0] tmp8005;
    wire[3:0] tmp8006;
    wire[11:0] tmp8007;
    wire[15:0] tmp8008;
    wire[11:0] tmp8009;
    wire[15:0] tmp8010;
    wire[15:0] tmp8011;
    wire tmp8012;
    wire[15:0] tmp8013;
    wire[7:0] tmp8014;
    wire[7:0] tmp8015;
    wire[7:0] tmp8016;
    wire[15:0] tmp8017;
    wire[7:0] tmp8018;
    wire[15:0] tmp8019;
    wire[15:0] tmp8020;
    wire tmp8021;
    wire[15:0] tmp8022;
    wire[15:0] tmp8023;
    wire[15:0] tmp8024;
    wire tmp8025;
    wire[15:0] tmp8026;
    wire tmp8027;
    wire[15:0] tmp8028;
    wire tmp8029;
    wire[15:0] tmp8030;
    wire tmp8031;
    wire[15:0] tmp8032;
    wire[7:0] tmp8033;
    wire[7:0] tmp8034;
    wire[7:0] tmp8035;
    wire[7:0] tmp8036;
    wire tmp8037;
    wire tmp8038;
    wire tmp8039;
    wire tmp8040;
    wire tmp8041;
    wire[5:0] tmp8042;
    wire[2:0] tmp8043;
    wire tmp8044;
    wire tmp8045;
    wire[1:0] tmp8046;
    wire tmp8047;
    wire tmp8048;
    wire tmp8049;
    wire tmp8050;
    wire tmp8051;
    wire tmp8052;
    wire[2:0] tmp8053;
    wire tmp8054;
    wire tmp8055;
    wire[1:0] tmp8056;
    wire tmp8057;
    wire tmp8058;
    wire tmp8059;
    wire tmp8060;
    wire tmp8061;
    wire tmp8062;
    wire tmp8063;
    wire tmp8064;
    wire tmp8065;
    wire tmp8066;
    wire tmp8067;
    wire tmp8068;
    wire tmp8069;
    wire tmp8070;
    wire tmp8071;
    wire tmp8072;
    wire tmp8073;
    wire[8:0] tmp8074;
    wire[6:0] tmp8075;
    wire[7:0] tmp8076;
    wire[8:0] tmp8077;
    wire tmp8078;
    wire tmp8079;
    wire[6:0] tmp8080;
    wire[6:0] tmp8081;
    wire[6:0] tmp8082;
    wire[6:0] tmp8083;
    wire[7:0] tmp8084;
    wire[7:0] tmp8085;
    wire[8:0] tmp8086;
    wire[7:0] tmp8087;
    wire[8:0] tmp8088;
    wire[9:0] tmp8089;
    wire[7:0] tmp8090;
    wire[6:0] tmp8091;
    wire[7:0] tmp8092;
    wire[8:0] tmp8093;
    wire[7:0] tmp8094;

    // Combinational
    assign const_1645_0 = 0;
    assign const_1646_1 = 1;
    assign const_1647_0 = 0;
    assign const_1648_1 = 1;
    assign const_1649_0 = 0;
    assign const_1650_0 = 0;
    assign out8080 = tmp8080;
    assign out8084 = tmp8084;
    assign tmp7988 = tmp8032;
    assign tmp7989 = {mantissa_product[14], mantissa_product[13], mantissa_product[12], mantissa_product[11], mantissa_product[10], mantissa_product[9], mantissa_product[8], mantissa_product[7], mantissa_product[6], mantissa_product[5], mantissa_product[4], mantissa_product[3], mantissa_product[2], mantissa_product[1], mantissa_product[0]};
    assign tmp7990 = {tmp7989, const_1645_0};
    assign tmp7991 = {mantissa_product[15], mantissa_product[14], mantissa_product[13], mantissa_product[12], mantissa_product[11], mantissa_product[10], mantissa_product[9], mantissa_product[8], mantissa_product[7], mantissa_product[6], mantissa_product[5], mantissa_product[4], mantissa_product[3], mantissa_product[2], mantissa_product[1]};
    assign tmp7992 = {const_1645_0, tmp7991};
    assign tmp7993 = const_1646_1 ? tmp7990 : tmp7992;
    assign tmp7994 = {leading_zeros[0]};
    assign tmp7995 = tmp7994 ? tmp7993 : mantissa_product;
    assign tmp7996 = {const_1645_0, const_1645_0};
    assign tmp7997 = {tmp7996[1], tmp7996[0]};
    assign tmp7998 = {tmp7995[13], tmp7995[12], tmp7995[11], tmp7995[10], tmp7995[9], tmp7995[8], tmp7995[7], tmp7995[6], tmp7995[5], tmp7995[4], tmp7995[3], tmp7995[2], tmp7995[1], tmp7995[0]};
    assign tmp7999 = {tmp7998, tmp7997};
    assign tmp8000 = {tmp7995[15], tmp7995[14], tmp7995[13], tmp7995[12], tmp7995[11], tmp7995[10], tmp7995[9], tmp7995[8], tmp7995[7], tmp7995[6], tmp7995[5], tmp7995[4], tmp7995[3], tmp7995[2]};
    assign tmp8001 = {tmp7997, tmp8000};
    assign tmp8002 = const_1646_1 ? tmp7999 : tmp8001;
    assign tmp8003 = {leading_zeros[1]};
    assign tmp8004 = tmp8003 ? tmp8002 : tmp7995;
    assign tmp8005 = {tmp7997, tmp7997};
    assign tmp8006 = {tmp8005[3], tmp8005[2], tmp8005[1], tmp8005[0]};
    assign tmp8007 = {tmp8004[11], tmp8004[10], tmp8004[9], tmp8004[8], tmp8004[7], tmp8004[6], tmp8004[5], tmp8004[4], tmp8004[3], tmp8004[2], tmp8004[1], tmp8004[0]};
    assign tmp8008 = {tmp8007, tmp8006};
    assign tmp8009 = {tmp8004[15], tmp8004[14], tmp8004[13], tmp8004[12], tmp8004[11], tmp8004[10], tmp8004[9], tmp8004[8], tmp8004[7], tmp8004[6], tmp8004[5], tmp8004[4]};
    assign tmp8010 = {tmp8006, tmp8009};
    assign tmp8011 = const_1646_1 ? tmp8008 : tmp8010;
    assign tmp8012 = {leading_zeros[2]};
    assign tmp8013 = tmp8012 ? tmp8011 : tmp8004;
    assign tmp8014 = {tmp8006, tmp8006};
    assign tmp8015 = {tmp8014[7], tmp8014[6], tmp8014[5], tmp8014[4], tmp8014[3], tmp8014[2], tmp8014[1], tmp8014[0]};
    assign tmp8016 = {tmp8013[7], tmp8013[6], tmp8013[5], tmp8013[4], tmp8013[3], tmp8013[2], tmp8013[1], tmp8013[0]};
    assign tmp8017 = {tmp8016, tmp8015};
    assign tmp8018 = {tmp8013[15], tmp8013[14], tmp8013[13], tmp8013[12], tmp8013[11], tmp8013[10], tmp8013[9], tmp8013[8]};
    assign tmp8019 = {tmp8015, tmp8018};
    assign tmp8020 = const_1646_1 ? tmp8017 : tmp8019;
    assign tmp8021 = {leading_zeros[3]};
    assign tmp8022 = tmp8021 ? tmp8020 : tmp8013;
    assign tmp8023 = {tmp8015, tmp8015};
    assign tmp8024 = {tmp8023[15], tmp8023[14], tmp8023[13], tmp8023[12], tmp8023[11], tmp8023[10], tmp8023[9], tmp8023[8], tmp8023[7], tmp8023[6], tmp8023[5], tmp8023[4], tmp8023[3], tmp8023[2], tmp8023[1], tmp8023[0]};
    assign tmp8025 = {leading_zeros[4]};
    assign tmp8026 = tmp8025 ? tmp8024 : tmp8022;
    assign tmp8027 = {leading_zeros[5]};
    assign tmp8028 = tmp8027 ? tmp8024 : tmp8026;
    assign tmp8029 = {leading_zeros[6]};
    assign tmp8030 = tmp8029 ? tmp8024 : tmp8028;
    assign tmp8031 = {leading_zeros[7]};
    assign tmp8032 = tmp8031 ? tmp8024 : tmp8030;
    assign tmp8033 = tmp8035;
    assign tmp8034 = tmp8036;
    assign tmp8035 = {tmp7988[15], tmp7988[14], tmp7988[13], tmp7988[12], tmp7988[11], tmp7988[10], tmp7988[9], tmp7988[8]};
    assign tmp8036 = {tmp7988[7], tmp7988[6], tmp7988[5], tmp7988[4], tmp7988[3], tmp7988[2], tmp7988[1], tmp7988[0]};
    assign tmp8037 = tmp8040;
    assign tmp8038 = tmp8041;
    assign tmp8039 = tmp8063;
    assign tmp8040 = {tmp8034[7]};
    assign tmp8041 = {tmp8034[6]};
    assign tmp8042 = {tmp8034[5], tmp8034[4], tmp8034[3], tmp8034[2], tmp8034[1], tmp8034[0]};
    assign tmp8043 = {tmp8042[2], tmp8042[1], tmp8042[0]};
    assign tmp8044 = {tmp8043[0]};
    assign tmp8045 = {tmp8044};
    assign tmp8046 = {tmp8043[2], tmp8043[1]};
    assign tmp8047 = {tmp8046[0]};
    assign tmp8048 = {tmp8047};
    assign tmp8049 = {tmp8046[1]};
    assign tmp8050 = {tmp8049};
    assign tmp8051 = tmp8048 | tmp8050;
    assign tmp8052 = tmp8045 | tmp8051;
    assign tmp8053 = {tmp8042[5], tmp8042[4], tmp8042[3]};
    assign tmp8054 = {tmp8053[0]};
    assign tmp8055 = {tmp8054};
    assign tmp8056 = {tmp8053[2], tmp8053[1]};
    assign tmp8057 = {tmp8056[0]};
    assign tmp8058 = {tmp8057};
    assign tmp8059 = {tmp8056[1]};
    assign tmp8060 = {tmp8059};
    assign tmp8061 = tmp8058 | tmp8060;
    assign tmp8062 = tmp8055 | tmp8061;
    assign tmp8063 = tmp8052 | tmp8062;
    assign tmp8064 = tmp8073;
    assign tmp8065 = {tmp8033[1]};
    assign tmp8066 = tmp8038 | tmp8039;
    assign tmp8067 = tmp8037 & tmp8066;
    assign tmp8068 = ~tmp8038;
    assign tmp8069 = tmp8037 & tmp8068;
    assign tmp8070 = ~tmp8039;
    assign tmp8071 = tmp8069 & tmp8070;
    assign tmp8072 = tmp8071 & tmp8065;
    assign tmp8073 = tmp8067 | tmp8072;
    assign tmp8074 = tmp8077;
    assign tmp8075 = {const_1647_0, const_1647_0, const_1647_0, const_1647_0, const_1647_0, const_1647_0, const_1647_0};
    assign tmp8076 = {tmp8075, tmp8064};
    assign tmp8077 = tmp8033 + tmp8076;
    assign tmp8078 = tmp8079;
    assign tmp8079 = {tmp8074[8]};
    assign tmp8080 = tmp8083;
    assign tmp8081 = {tmp8074[7], tmp8074[6], tmp8074[5], tmp8074[4], tmp8074[3], tmp8074[2], tmp8074[1]};
    assign tmp8082 = {tmp8074[6], tmp8074[5], tmp8074[4], tmp8074[3], tmp8074[2], tmp8074[1], tmp8074[0]};
    assign tmp8083 = tmp8078 ? tmp8081 : tmp8082;
    assign tmp8084 = tmp8094;
    assign tmp8085 = tmp8090;
    assign tmp8086 = unbiased_exp - leading_zeros;
    assign tmp8087 = {const_1649_0, const_1649_0, const_1649_0, const_1649_0, const_1649_0, const_1649_0, const_1649_0, const_1649_0};
    assign tmp8088 = {tmp8087, const_1648_1};
    assign tmp8089 = tmp8086 + tmp8088;
    assign tmp8090 = {tmp8089[7], tmp8089[6], tmp8089[5], tmp8089[4], tmp8089[3], tmp8089[2], tmp8089[1], tmp8089[0]};
    assign tmp8091 = {const_1650_0, const_1650_0, const_1650_0, const_1650_0, const_1650_0, const_1650_0, const_1650_0};
    assign tmp8092 = {tmp8091, tmp8078};
    assign tmp8093 = tmp8085 + tmp8092;
    assign tmp8094 = {tmp8093[7], tmp8093[6], tmp8093[5], tmp8093[4], tmp8093[3], tmp8093[2], tmp8093[1], tmp8093[0]};

endmodule

