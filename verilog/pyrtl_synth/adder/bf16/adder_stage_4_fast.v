// Generated automatically via PyRTL
// As one initial test of synthesis, map to FPGA with:
//   yosys -p "synth_xilinx -top toplevel" thisfile.v

module toplevel(clk, rst, mant_aligned, mant_unchanged, s_xor, out6654, out6655, out6657);
    input clk;
    input rst;
    input[7:0] mant_aligned;
    input[7:0] mant_unchanged;
    input s_xor;
    output[8:0] out6654;
    output out6655;
    output[3:0] out6657;

    reg[8:0] tmp6654;
    reg tmp6655;

    wire const_1223_0;
    wire const_1224_1;
    wire const_1225_0;
    wire const_1226_0;
    wire const_1227_0;
    wire const_1228_0;
    wire const_1229_0;
    wire const_1230_1;
    wire const_1231_0;
    wire const_1232_0;
    wire const_1233_0;
    wire const_1234_0;
    wire[1:0] const_1235_2;
    wire const_1236_1;
    wire const_1237_0;
    wire[1:0] const_1238_1;
    wire[1:0] const_1239_0;
    wire const_1240_0;
    wire const_1241_0;
    wire const_1242_0;
    wire const_1243_0;
    wire[1:0] const_1244_2;
    wire const_1245_1;
    wire const_1246_0;
    wire[1:0] const_1247_1;
    wire[1:0] const_1248_0;
    wire const_1249_0;
    wire const_1250_0;
    wire const_1251_0;
    wire const_1252_0;
    wire[1:0] const_1253_2;
    wire const_1254_1;
    wire const_1255_0;
    wire[1:0] const_1256_1;
    wire[1:0] const_1257_0;
    wire const_1258_0;
    wire const_1259_0;
    wire const_1260_0;
    wire const_1261_0;
    wire[1:0] const_1262_2;
    wire const_1263_1;
    wire const_1264_0;
    wire[1:0] const_1265_1;
    wire[1:0] const_1266_0;
    wire const_1267_0;
    wire const_1268_0;
    wire[2:0] const_1269_4;
    wire[1:0] const_1270_1;
    wire const_1271_0;
    wire const_1272_0;
    wire const_1273_0;
    wire[2:0] const_1274_4;
    wire[1:0] const_1275_1;
    wire const_1276_0;
    wire const_1277_0;
    wire const_1278_0;
    wire[3:0] const_1279_8;
    wire[1:0] const_1280_1;
    wire const_1281_0;
    wire const_1282_0;
    wire const_1283_0;
    wire const_1284_1;
    wire const_1285_0;
    wire const_1286_0;
    wire const_1287_0;
    wire[9:0] tmp6552;
    wire tmp6553;
    wire[8:0] tmp6554;
    wire[8:0] tmp6555;
    wire[7:0] tmp6556;
    wire[6:0] tmp6557;
    wire[7:0] tmp6558;
    wire[8:0] tmp6559;
    wire tmp6560;
    wire[7:0] tmp6561;
    wire[8:0] tmp6562;
    wire[8:0] tmp6563;
    wire[8:0] tmp6564;
    wire tmp6565;
    wire tmp6566;
    wire tmp6567;
    wire tmp6568;
    wire tmp6569;
    wire tmp6570;
    wire tmp6571;
    wire tmp6572;
    wire tmp6573;
    wire[8:0] tmp6574;
    wire tmp6575;
    wire tmp6576;
    wire tmp6577;
    wire tmp6578;
    wire tmp6579;
    wire tmp6580;
    wire tmp6581;
    wire tmp6582;
    wire tmp6583;
    wire tmp6584;
    wire tmp6585;
    wire tmp6586;
    wire tmp6587;
    wire tmp6588;
    wire tmp6589;
    wire tmp6590;
    wire tmp6591;
    wire tmp6592;
    wire tmp6593;
    wire tmp6594;
    wire tmp6595;
    wire tmp6596;
    wire tmp6597;
    wire tmp6598;
    wire tmp6599;
    wire tmp6600;
    wire tmp6601;
    wire tmp6602;
    wire tmp6603;
    wire tmp6604;
    wire tmp6605;
    wire tmp6606;
    wire tmp6607;
    wire tmp6608;
    wire tmp6609;
    wire tmp6610;
    wire tmp6611;
    wire tmp6612;
    wire tmp6613;
    wire tmp6614;
    wire tmp6615;
    wire tmp6616;
    wire tmp6617;
    wire tmp6618;
    wire tmp6619;
    wire tmp6620;
    wire tmp6621;
    wire tmp6622;
    wire tmp6623;
    wire tmp6624;
    wire tmp6625;
    wire tmp6626;
    wire tmp6627;
    wire tmp6628;
    wire tmp6629;
    wire tmp6630;
    wire tmp6631;
    wire tmp6632;
    wire tmp6633;
    wire tmp6634;
    wire tmp6635;
    wire tmp6636;
    wire tmp6637;
    wire tmp6638;
    wire[9:0] tmp6639;
    wire tmp6640;
    wire[9:0] tmp6641;
    wire[9:0] tmp6642;
    wire tmp6643;
    wire tmp6644;
    wire[8:0] tmp6645;
    wire[9:0] tmp6646;
    wire[8:0] tmp6647;
    wire[9:0] tmp6648;
    wire[10:0] tmp6649;
    wire tmp6650;
    wire[10:0] tmp6651;
    wire[10:0] tmp6652;
    wire[8:0] tmp6653;
    wire tmp6656;
    wire[3:0] tmp6657;
    wire[7:0] tmp6658;
    wire[1:0] tmp6659;
    wire[1:0] tmp6660;
    wire[1:0] tmp6661;
    wire[1:0] tmp6662;
    wire[1:0] tmp6663;
    wire tmp6664;
    wire[1:0] tmp6665;
    wire tmp6666;
    wire tmp6667;
    wire[1:0] tmp6668;
    wire tmp6669;
    wire tmp6670;
    wire tmp6671;
    wire tmp6672;
    wire tmp6673;
    wire tmp6674;
    wire tmp6675;
    wire[1:0] tmp6676;
    wire[1:0] tmp6677;
    wire[1:0] tmp6678;
    wire[1:0] tmp6679;
    wire[1:0] tmp6680;
    wire tmp6681;
    wire[1:0] tmp6682;
    wire tmp6683;
    wire tmp6684;
    wire[1:0] tmp6685;
    wire tmp6686;
    wire tmp6687;
    wire tmp6688;
    wire tmp6689;
    wire tmp6690;
    wire tmp6691;
    wire tmp6692;
    wire[1:0] tmp6693;
    wire[1:0] tmp6694;
    wire[1:0] tmp6695;
    wire[1:0] tmp6696;
    wire[1:0] tmp6697;
    wire tmp6698;
    wire[1:0] tmp6699;
    wire tmp6700;
    wire tmp6701;
    wire[1:0] tmp6702;
    wire tmp6703;
    wire tmp6704;
    wire tmp6705;
    wire tmp6706;
    wire tmp6707;
    wire tmp6708;
    wire tmp6709;
    wire[1:0] tmp6710;
    wire[1:0] tmp6711;
    wire[1:0] tmp6712;
    wire[1:0] tmp6713;
    wire[1:0] tmp6714;
    wire tmp6715;
    wire[1:0] tmp6716;
    wire tmp6717;
    wire tmp6718;
    wire[1:0] tmp6719;
    wire tmp6720;
    wire tmp6721;
    wire tmp6722;
    wire tmp6723;
    wire tmp6724;
    wire tmp6725;
    wire tmp6726;
    wire[1:0] tmp6727;
    wire[1:0] tmp6728;
    wire[1:0] tmp6729;
    wire[1:0] tmp6730;
    wire[2:0] tmp6731;
    wire tmp6732;
    wire tmp6733;
    wire tmp6734;
    wire tmp6735;
    wire[2:0] tmp6736;
    wire tmp6737;
    wire tmp6738;
    wire[2:0] tmp6739;
    wire tmp6740;
    wire tmp6741;
    wire tmp6742;
    wire[1:0] tmp6743;
    wire[2:0] tmp6744;
    wire[2:0] tmp6745;
    wire[2:0] tmp6746;
    wire[2:0] tmp6747;
    wire[2:0] tmp6748;
    wire tmp6749;
    wire tmp6750;
    wire tmp6751;
    wire tmp6752;
    wire[2:0] tmp6753;
    wire tmp6754;
    wire tmp6755;
    wire[2:0] tmp6756;
    wire tmp6757;
    wire tmp6758;
    wire tmp6759;
    wire[1:0] tmp6760;
    wire[2:0] tmp6761;
    wire[2:0] tmp6762;
    wire[2:0] tmp6763;
    wire[2:0] tmp6764;
    wire[3:0] tmp6765;
    wire[3:0] tmp6766;
    wire tmp6767;
    wire tmp6768;
    wire tmp6769;
    wire[1:0] tmp6770;
    wire[3:0] tmp6771;
    wire tmp6772;
    wire tmp6773;
    wire[3:0] tmp6774;
    wire tmp6775;
    wire tmp6776;
    wire tmp6777;
    wire[2:0] tmp6778;
    wire[3:0] tmp6779;
    wire[3:0] tmp6780;
    wire[3:0] tmp6781;
    wire[3:0] tmp6782;
    wire[2:0] tmp6783;
    wire[3:0] tmp6784;
    wire[4:0] tmp6785;
    wire[3:0] tmp6786;
    wire[4:0] tmp6787;
    wire[4:0] tmp6788;
    wire[3:0] tmp6789;

    // Combinational
    assign const_1223_0 = 0;
    assign const_1224_1 = 1;
    assign const_1225_0 = 0;
    assign const_1226_0 = 0;
    assign const_1227_0 = 0;
    assign const_1228_0 = 0;
    assign const_1229_0 = 0;
    assign const_1230_1 = 1;
    assign const_1231_0 = 0;
    assign const_1232_0 = 0;
    assign const_1233_0 = 0;
    assign const_1234_0 = 0;
    assign const_1235_2 = 2;
    assign const_1236_1 = 1;
    assign const_1237_0 = 0;
    assign const_1238_1 = 1;
    assign const_1239_0 = 0;
    assign const_1240_0 = 0;
    assign const_1241_0 = 0;
    assign const_1242_0 = 0;
    assign const_1243_0 = 0;
    assign const_1244_2 = 2;
    assign const_1245_1 = 1;
    assign const_1246_0 = 0;
    assign const_1247_1 = 1;
    assign const_1248_0 = 0;
    assign const_1249_0 = 0;
    assign const_1250_0 = 0;
    assign const_1251_0 = 0;
    assign const_1252_0 = 0;
    assign const_1253_2 = 2;
    assign const_1254_1 = 1;
    assign const_1255_0 = 0;
    assign const_1256_1 = 1;
    assign const_1257_0 = 0;
    assign const_1258_0 = 0;
    assign const_1259_0 = 0;
    assign const_1260_0 = 0;
    assign const_1261_0 = 0;
    assign const_1262_2 = 2;
    assign const_1263_1 = 1;
    assign const_1264_0 = 0;
    assign const_1265_1 = 1;
    assign const_1266_0 = 0;
    assign const_1267_0 = 0;
    assign const_1268_0 = 0;
    assign const_1269_4 = 4;
    assign const_1270_1 = 1;
    assign const_1271_0 = 0;
    assign const_1272_0 = 0;
    assign const_1273_0 = 0;
    assign const_1274_4 = 4;
    assign const_1275_1 = 1;
    assign const_1276_0 = 0;
    assign const_1277_0 = 0;
    assign const_1278_0 = 0;
    assign const_1279_8 = 8;
    assign const_1280_1 = 1;
    assign const_1281_0 = 0;
    assign const_1282_0 = 0;
    assign const_1283_0 = 0;
    assign const_1284_1 = 1;
    assign const_1285_0 = 0;
    assign const_1286_0 = 0;
    assign const_1287_0 = 0;
    assign out6654 = tmp6654;
    assign out6655 = tmp6655;
    assign out6657 = tmp6657;
    assign tmp6552 = tmp6642;
    assign tmp6553 = {const_1223_0};
    assign tmp6554 = {tmp6553, mant_unchanged};
    assign tmp6555 = tmp6563;
    assign tmp6556 = ~mant_aligned;
    assign tmp6557 = {const_1225_0, const_1225_0, const_1225_0, const_1225_0, const_1225_0, const_1225_0, const_1225_0};
    assign tmp6558 = {tmp6557, const_1224_1};
    assign tmp6559 = tmp6556 + tmp6558;
    assign tmp6560 = {tmp6559[8]};
    assign tmp6561 = {const_1227_0, const_1227_0, const_1227_0, const_1227_0, const_1227_0, const_1227_0, const_1227_0, const_1227_0};
    assign tmp6562 = {tmp6561, const_1226_0};
    assign tmp6563 = s_xor ? tmp6559 : tmp6562;
    assign tmp6564 = tmp6554 ^ tmp6555;
    assign tmp6565 = {tmp6564[0]};
    assign tmp6566 = {tmp6564[1]};
    assign tmp6567 = {tmp6564[2]};
    assign tmp6568 = {tmp6564[3]};
    assign tmp6569 = {tmp6564[4]};
    assign tmp6570 = {tmp6564[5]};
    assign tmp6571 = {tmp6564[6]};
    assign tmp6572 = {tmp6564[7]};
    assign tmp6573 = {tmp6564[8]};
    assign tmp6574 = tmp6554 & tmp6555;
    assign tmp6575 = {tmp6574[0]};
    assign tmp6576 = {tmp6574[1]};
    assign tmp6577 = {tmp6574[2]};
    assign tmp6578 = {tmp6574[3]};
    assign tmp6579 = {tmp6574[4]};
    assign tmp6580 = {tmp6574[5]};
    assign tmp6581 = {tmp6574[6]};
    assign tmp6582 = {tmp6574[7]};
    assign tmp6583 = {tmp6574[8]};
    assign tmp6584 = tmp6573 & tmp6582;
    assign tmp6585 = tmp6583 | tmp6584;
    assign tmp6586 = tmp6573 & tmp6572;
    assign tmp6587 = tmp6572 & tmp6581;
    assign tmp6588 = tmp6582 | tmp6587;
    assign tmp6589 = tmp6572 & tmp6571;
    assign tmp6590 = tmp6571 & tmp6580;
    assign tmp6591 = tmp6581 | tmp6590;
    assign tmp6592 = tmp6571 & tmp6570;
    assign tmp6593 = tmp6570 & tmp6579;
    assign tmp6594 = tmp6580 | tmp6593;
    assign tmp6595 = tmp6570 & tmp6569;
    assign tmp6596 = tmp6569 & tmp6578;
    assign tmp6597 = tmp6579 | tmp6596;
    assign tmp6598 = tmp6569 & tmp6568;
    assign tmp6599 = tmp6568 & tmp6577;
    assign tmp6600 = tmp6578 | tmp6599;
    assign tmp6601 = tmp6568 & tmp6567;
    assign tmp6602 = tmp6567 & tmp6576;
    assign tmp6603 = tmp6577 | tmp6602;
    assign tmp6604 = tmp6567 & tmp6566;
    assign tmp6605 = tmp6566 & tmp6575;
    assign tmp6606 = tmp6576 | tmp6605;
    assign tmp6607 = tmp6586 & tmp6591;
    assign tmp6608 = tmp6585 | tmp6607;
    assign tmp6609 = tmp6586 & tmp6592;
    assign tmp6610 = tmp6589 & tmp6594;
    assign tmp6611 = tmp6588 | tmp6610;
    assign tmp6612 = tmp6589 & tmp6595;
    assign tmp6613 = tmp6592 & tmp6597;
    assign tmp6614 = tmp6591 | tmp6613;
    assign tmp6615 = tmp6592 & tmp6598;
    assign tmp6616 = tmp6595 & tmp6600;
    assign tmp6617 = tmp6594 | tmp6616;
    assign tmp6618 = tmp6595 & tmp6601;
    assign tmp6619 = tmp6598 & tmp6603;
    assign tmp6620 = tmp6597 | tmp6619;
    assign tmp6621 = tmp6598 & tmp6604;
    assign tmp6622 = tmp6601 & tmp6606;
    assign tmp6623 = tmp6600 | tmp6622;
    assign tmp6624 = tmp6604 & tmp6575;
    assign tmp6625 = tmp6603 | tmp6624;
    assign tmp6626 = tmp6609 & tmp6620;
    assign tmp6627 = tmp6608 | tmp6626;
    assign tmp6628 = tmp6609 & tmp6621;
    assign tmp6629 = tmp6612 & tmp6623;
    assign tmp6630 = tmp6611 | tmp6629;
    assign tmp6631 = tmp6615 & tmp6625;
    assign tmp6632 = tmp6614 | tmp6631;
    assign tmp6633 = tmp6618 & tmp6606;
    assign tmp6634 = tmp6617 | tmp6633;
    assign tmp6635 = tmp6621 & tmp6575;
    assign tmp6636 = tmp6620 | tmp6635;
    assign tmp6637 = tmp6628 & tmp6575;
    assign tmp6638 = tmp6627 | tmp6637;
    assign tmp6639 = {tmp6638, tmp6630, tmp6632, tmp6634, tmp6636, tmp6623, tmp6625, tmp6606, tmp6575, const_1228_0};
    assign tmp6640 = {const_1229_0};
    assign tmp6641 = {tmp6640, tmp6564};
    assign tmp6642 = tmp6639 ^ tmp6641;
    assign tmp6643 = tmp6644;
    assign tmp6644 = {tmp6552[9]};
    assign tmp6645 = tmp6653;
    assign tmp6646 = ~tmp6552;
    assign tmp6647 = {const_1231_0, const_1231_0, const_1231_0, const_1231_0, const_1231_0, const_1231_0, const_1231_0, const_1231_0, const_1231_0};
    assign tmp6648 = {tmp6647, const_1230_1};
    assign tmp6649 = tmp6646 + tmp6648;
    assign tmp6650 = {const_1232_0};
    assign tmp6651 = {tmp6650, tmp6552};
    assign tmp6652 = tmp6643 ? tmp6649 : tmp6651;
    assign tmp6653 = {tmp6652[8], tmp6652[7], tmp6652[6], tmp6652[5], tmp6652[4], tmp6652[3], tmp6652[2], tmp6652[1], tmp6652[0]};
    assign tmp6656 = {tmp6654[8]};
    assign tmp6657 = tmp6789;
    assign tmp6658 = {tmp6654[7], tmp6654[6], tmp6654[5], tmp6654[4], tmp6654[3], tmp6654[2], tmp6654[1], tmp6654[0]};
    assign tmp6659 = {tmp6658[7], tmp6658[6]};
    assign tmp6660 = {tmp6658[5], tmp6658[4]};
    assign tmp6661 = {tmp6658[3], tmp6658[2]};
    assign tmp6662 = {tmp6658[1], tmp6658[0]};
    assign tmp6663 = tmp6679;
    assign tmp6664 = {const_1234_0};
    assign tmp6665 = {tmp6664, const_1233_0};
    assign tmp6666 = tmp6659 == tmp6665;
    assign tmp6667 = {const_1237_0};
    assign tmp6668 = {tmp6667, const_1236_1};
    assign tmp6669 = tmp6659 == tmp6668;
    assign tmp6670 = ~tmp6666;
    assign tmp6671 = tmp6670 & tmp6669;
    assign tmp6672 = ~tmp6666;
    assign tmp6673 = ~tmp6669;
    assign tmp6674 = tmp6672 & tmp6673;
    assign tmp6675 = {const_1241_0};
    assign tmp6676 = {tmp6675, const_1240_0};
    assign tmp6677 = tmp6666 ? const_1235_2 : tmp6676;
    assign tmp6678 = tmp6671 ? const_1238_1 : tmp6677;
    assign tmp6679 = tmp6674 ? const_1239_0 : tmp6678;
    assign tmp6680 = tmp6696;
    assign tmp6681 = {const_1243_0};
    assign tmp6682 = {tmp6681, const_1242_0};
    assign tmp6683 = tmp6660 == tmp6682;
    assign tmp6684 = {const_1246_0};
    assign tmp6685 = {tmp6684, const_1245_1};
    assign tmp6686 = tmp6660 == tmp6685;
    assign tmp6687 = ~tmp6683;
    assign tmp6688 = tmp6687 & tmp6686;
    assign tmp6689 = ~tmp6683;
    assign tmp6690 = ~tmp6686;
    assign tmp6691 = tmp6689 & tmp6690;
    assign tmp6692 = {const_1250_0};
    assign tmp6693 = {tmp6692, const_1249_0};
    assign tmp6694 = tmp6683 ? const_1244_2 : tmp6693;
    assign tmp6695 = tmp6688 ? const_1247_1 : tmp6694;
    assign tmp6696 = tmp6691 ? const_1248_0 : tmp6695;
    assign tmp6697 = tmp6713;
    assign tmp6698 = {const_1252_0};
    assign tmp6699 = {tmp6698, const_1251_0};
    assign tmp6700 = tmp6661 == tmp6699;
    assign tmp6701 = {const_1255_0};
    assign tmp6702 = {tmp6701, const_1254_1};
    assign tmp6703 = tmp6661 == tmp6702;
    assign tmp6704 = ~tmp6700;
    assign tmp6705 = tmp6704 & tmp6703;
    assign tmp6706 = ~tmp6700;
    assign tmp6707 = ~tmp6703;
    assign tmp6708 = tmp6706 & tmp6707;
    assign tmp6709 = {const_1259_0};
    assign tmp6710 = {tmp6709, const_1258_0};
    assign tmp6711 = tmp6700 ? const_1253_2 : tmp6710;
    assign tmp6712 = tmp6705 ? const_1256_1 : tmp6711;
    assign tmp6713 = tmp6708 ? const_1257_0 : tmp6712;
    assign tmp6714 = tmp6730;
    assign tmp6715 = {const_1261_0};
    assign tmp6716 = {tmp6715, const_1260_0};
    assign tmp6717 = tmp6662 == tmp6716;
    assign tmp6718 = {const_1264_0};
    assign tmp6719 = {tmp6718, const_1263_1};
    assign tmp6720 = tmp6662 == tmp6719;
    assign tmp6721 = ~tmp6717;
    assign tmp6722 = tmp6721 & tmp6720;
    assign tmp6723 = ~tmp6717;
    assign tmp6724 = ~tmp6720;
    assign tmp6725 = tmp6723 & tmp6724;
    assign tmp6726 = {const_1268_0};
    assign tmp6727 = {tmp6726, const_1267_0};
    assign tmp6728 = tmp6717 ? const_1262_2 : tmp6727;
    assign tmp6729 = tmp6722 ? const_1265_1 : tmp6728;
    assign tmp6730 = tmp6725 ? const_1266_0 : tmp6729;
    assign tmp6731 = tmp6747;
    assign tmp6732 = {tmp6663[1]};
    assign tmp6733 = {tmp6680[1]};
    assign tmp6734 = tmp6732 & tmp6733;
    assign tmp6735 = {tmp6680[0]};
    assign tmp6736 = {const_1270_1, tmp6735};
    assign tmp6737 = ~tmp6734;
    assign tmp6738 = tmp6737 & tmp6732;
    assign tmp6739 = {const_1271_0, tmp6663};
    assign tmp6740 = ~tmp6734;
    assign tmp6741 = ~tmp6732;
    assign tmp6742 = tmp6740 & tmp6741;
    assign tmp6743 = {const_1273_0, const_1273_0};
    assign tmp6744 = {tmp6743, const_1272_0};
    assign tmp6745 = tmp6734 ? const_1269_4 : tmp6744;
    assign tmp6746 = tmp6738 ? tmp6736 : tmp6745;
    assign tmp6747 = tmp6742 ? tmp6739 : tmp6746;
    assign tmp6748 = tmp6764;
    assign tmp6749 = {tmp6697[1]};
    assign tmp6750 = {tmp6714[1]};
    assign tmp6751 = tmp6749 & tmp6750;
    assign tmp6752 = {tmp6714[0]};
    assign tmp6753 = {const_1275_1, tmp6752};
    assign tmp6754 = ~tmp6751;
    assign tmp6755 = tmp6754 & tmp6749;
    assign tmp6756 = {const_1276_0, tmp6697};
    assign tmp6757 = ~tmp6751;
    assign tmp6758 = ~tmp6749;
    assign tmp6759 = tmp6757 & tmp6758;
    assign tmp6760 = {const_1278_0, const_1278_0};
    assign tmp6761 = {tmp6760, const_1277_0};
    assign tmp6762 = tmp6751 ? const_1274_4 : tmp6761;
    assign tmp6763 = tmp6755 ? tmp6753 : tmp6762;
    assign tmp6764 = tmp6759 ? tmp6756 : tmp6763;
    assign tmp6765 = tmp6766;
    assign tmp6766 = tmp6782;
    assign tmp6767 = {tmp6731[2]};
    assign tmp6768 = {tmp6748[2]};
    assign tmp6769 = tmp6767 & tmp6768;
    assign tmp6770 = {tmp6748[1], tmp6748[0]};
    assign tmp6771 = {const_1280_1, tmp6770};
    assign tmp6772 = ~tmp6769;
    assign tmp6773 = tmp6772 & tmp6767;
    assign tmp6774 = {const_1281_0, tmp6731};
    assign tmp6775 = ~tmp6769;
    assign tmp6776 = ~tmp6767;
    assign tmp6777 = tmp6775 & tmp6776;
    assign tmp6778 = {const_1283_0, const_1283_0, const_1283_0};
    assign tmp6779 = {tmp6778, const_1282_0};
    assign tmp6780 = tmp6769 ? const_1279_8 : tmp6779;
    assign tmp6781 = tmp6773 ? tmp6771 : tmp6780;
    assign tmp6782 = tmp6777 ? tmp6774 : tmp6781;
    assign tmp6783 = {const_1285_0, const_1285_0, const_1285_0};
    assign tmp6784 = {tmp6783, const_1284_1};
    assign tmp6785 = tmp6765 + tmp6784;
    assign tmp6786 = {const_1287_0, const_1287_0, const_1287_0, const_1287_0};
    assign tmp6787 = {tmp6786, const_1286_0};
    assign tmp6788 = tmp6656 ? tmp6787 : tmp6785;
    assign tmp6789 = {tmp6788[3], tmp6788[2], tmp6788[1], tmp6788[0]};

    // Registers
    always @(posedge clk)
    begin
        if (rst) begin
            tmp6654 <= 0;
            tmp6655 <= 0;
        end
        else begin
            tmp6654 <= tmp6645;
            tmp6655 <= tmp6643;
        end
    end

endmodule

