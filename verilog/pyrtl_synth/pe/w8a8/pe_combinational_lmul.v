// Generated automatically via PyRTL
// As one initial test of synthesis, map to FPGA with:
//   yosys -p "synth_xilinx -top toplevel" thisfile.v

module toplevel(clk, rst, accum_in, adder_en, data_en, data_in, weight_en, weight_in, out47790, out47791, out47792);
    input clk;
    input rst;
    input[7:0] accum_in;
    input adder_en;
    input data_en;
    input[7:0] data_in;
    input weight_en;
    input[7:0] weight_in;
    output[7:0] out47790;
    output[7:0] out47791;
    output[7:0] out47792;

    reg[7:0] tmp47790;
    reg[7:0] tmp47791;
    reg[7:0] tmp47792;

    wire[6:0] const_6693_55;
    wire const_6694_0;
    wire const_6695_1;
    wire const_6696_1;
    wire const_6697_1;
    wire const_6698_0;
    wire const_6699_0;
    wire[3:0] const_6700_8;
    wire[3:0] const_6701_8;
    wire[3:0] const_6702_0;
    wire const_6703_0;
    wire const_6704_0;
    wire const_6705_0;
    wire const_6706_0;
    wire const_6707_0;
    wire const_6708_0;
    wire const_6709_0;
    wire const_6710_0;
    wire const_6711_1;
    wire const_6712_0;
    wire const_6713_0;
    wire const_6714_0;
    wire const_6715_0;
    wire[1:0] const_6716_2;
    wire const_6717_1;
    wire const_6718_0;
    wire[1:0] const_6719_1;
    wire[1:0] const_6720_0;
    wire const_6721_0;
    wire const_6722_0;
    wire const_6723_0;
    wire const_6724_0;
    wire[1:0] const_6725_2;
    wire const_6726_1;
    wire const_6727_0;
    wire[1:0] const_6728_1;
    wire[1:0] const_6729_0;
    wire const_6730_0;
    wire const_6731_0;
    wire[2:0] const_6732_4;
    wire[1:0] const_6733_1;
    wire const_6734_0;
    wire const_6735_0;
    wire const_6736_0;
    wire const_6737_0;
    wire const_6738_1;
    wire const_6739_0;
    wire const_6740_0;
    wire const_6741_0;
    wire const_6742_0;
    wire const_6743_0;
    wire const_6744_1;
    wire const_6745_0;
    wire const_6746_0;
    wire const_6747_0;
    wire const_6748_0;
    wire const_6749_0;
    wire[7:0] tmp47784;
    wire[7:0] tmp47785;
    wire[7:0] tmp47786;
    wire tmp47787;
    wire tmp47788;
    wire tmp47789;
    wire tmp47793;
    wire tmp47794;
    wire tmp47795;
    wire[6:0] tmp47796;
    wire[6:0] tmp47797;
    wire[7:0] tmp47798;
    wire tmp47799;
    wire[7:0] tmp47800;
    wire[8:0] tmp47801;
    wire[7:0] tmp47802;
    wire[6:0] tmp47803;
    wire[7:0] tmp47804;
    wire tmp47805;
    wire tmp47806;
    wire tmp47807;
    wire tmp47808;
    wire[3:0] tmp47809;
    wire[3:0] tmp47810;
    wire[3:0] tmp47811;
    wire[3:0] tmp47812;
    wire[3:0] tmp47813;
    wire[3:0] tmp47814;
    wire[2:0] tmp47815;
    wire[3:0] tmp47816;
    wire[2:0] tmp47817;
    wire[3:0] tmp47818;
    wire tmp47819;
    wire[4:0] tmp47820;
    wire[4:0] tmp47821;
    wire[3:0] tmp47822;
    wire[3:0] tmp47823;
    wire[3:0] tmp47824;
    wire tmp47825;
    wire[4:0] tmp47826;
    wire tmp47827;
    wire tmp47828;
    wire[3:0] tmp47829;
    wire[3:0] tmp47830;
    wire tmp47831;
    wire[3:0] tmp47832;
    wire[3:0] tmp47833;
    wire[2:0] tmp47834;
    wire[3:0] tmp47835;
    wire[4:0] tmp47836;
    wire[3:0] tmp47837;
    wire[4:0] tmp47838;
    wire tmp47839;
    wire[4:0] tmp47840;
    wire[4:0] tmp47841;
    wire tmp47842;
    wire[3:0] tmp47843;
    wire tmp47844;
    wire[3:0] tmp47845;
    wire[3:0] tmp47846;
    wire[3:0] tmp47847;
    wire[3:0] tmp47848;
    wire tmp47849;
    wire[3:0] tmp47850;
    wire[7:0] tmp47851;
    wire[7:0] tmp47852;
    wire[6:0] tmp47853;
    wire[7:0] tmp47854;
    wire[6:0] tmp47855;
    wire[7:0] tmp47856;
    wire[7:0] tmp47857;
    wire tmp47858;
    wire[7:0] tmp47859;
    wire[1:0] tmp47860;
    wire[1:0] tmp47861;
    wire[5:0] tmp47862;
    wire[7:0] tmp47863;
    wire[5:0] tmp47864;
    wire[7:0] tmp47865;
    wire[7:0] tmp47866;
    wire tmp47867;
    wire[7:0] tmp47868;
    wire[3:0] tmp47869;
    wire[3:0] tmp47870;
    wire[3:0] tmp47871;
    wire[7:0] tmp47872;
    wire[3:0] tmp47873;
    wire[7:0] tmp47874;
    wire[7:0] tmp47875;
    wire tmp47876;
    wire[7:0] tmp47877;
    wire[7:0] tmp47878;
    wire[7:0] tmp47879;
    wire tmp47880;
    wire[7:0] tmp47881;
    wire[3:0] tmp47882;
    wire[3:0] tmp47883;
    wire tmp47884;
    wire tmp47885;
    wire tmp47886;
    wire tmp47887;
    wire tmp47888;
    wire[1:0] tmp47889;
    wire tmp47890;
    wire tmp47891;
    wire tmp47892;
    wire tmp47893;
    wire tmp47894;
    wire[5:0] tmp47895;
    wire tmp47896;
    wire[4:0] tmp47897;
    wire tmp47898;
    wire[4:0] tmp47899;
    wire[5:0] tmp47900;
    wire tmp47901;
    wire[4:0] tmp47902;
    wire tmp47903;
    wire[4:0] tmp47904;
    wire[5:0] tmp47905;
    wire tmp47906;
    wire[4:0] tmp47907;
    wire[5:0] tmp47908;
    wire[5:0] tmp47909;
    wire[5:0] tmp47910;
    wire tmp47911;
    wire tmp47912;
    wire[4:0] tmp47913;
    wire[5:0] tmp47914;
    wire[4:0] tmp47915;
    wire[5:0] tmp47916;
    wire[6:0] tmp47917;
    wire tmp47918;
    wire[6:0] tmp47919;
    wire[6:0] tmp47920;
    wire[4:0] tmp47921;
    wire tmp47922;
    wire[3:0] tmp47923;
    wire[3:0] tmp47924;
    wire[1:0] tmp47925;
    wire[1:0] tmp47926;
    wire[1:0] tmp47927;
    wire tmp47928;
    wire[1:0] tmp47929;
    wire tmp47930;
    wire tmp47931;
    wire[1:0] tmp47932;
    wire tmp47933;
    wire tmp47934;
    wire tmp47935;
    wire tmp47936;
    wire tmp47937;
    wire tmp47938;
    wire tmp47939;
    wire[1:0] tmp47940;
    wire[1:0] tmp47941;
    wire[1:0] tmp47942;
    wire[1:0] tmp47943;
    wire[1:0] tmp47944;
    wire tmp47945;
    wire[1:0] tmp47946;
    wire tmp47947;
    wire tmp47948;
    wire[1:0] tmp47949;
    wire tmp47950;
    wire tmp47951;
    wire tmp47952;
    wire tmp47953;
    wire tmp47954;
    wire tmp47955;
    wire tmp47956;
    wire[1:0] tmp47957;
    wire[1:0] tmp47958;
    wire[1:0] tmp47959;
    wire[1:0] tmp47960;
    wire[3:0] tmp47961;
    wire[2:0] tmp47962;
    wire tmp47963;
    wire tmp47964;
    wire tmp47965;
    wire tmp47966;
    wire[2:0] tmp47967;
    wire tmp47968;
    wire tmp47969;
    wire[2:0] tmp47970;
    wire tmp47971;
    wire tmp47972;
    wire tmp47973;
    wire[1:0] tmp47974;
    wire[2:0] tmp47975;
    wire[2:0] tmp47976;
    wire[2:0] tmp47977;
    wire[2:0] tmp47978;
    wire tmp47979;
    wire[3:0] tmp47980;
    wire[2:0] tmp47981;
    wire[3:0] tmp47982;
    wire[4:0] tmp47983;
    wire[3:0] tmp47984;
    wire[4:0] tmp47985;
    wire[4:0] tmp47986;
    wire[3:0] tmp47987;
    wire[4:0] tmp47988;
    wire tmp47989;
    wire[4:0] tmp47990;
    wire[3:0] tmp47991;
    wire[4:0] tmp47992;
    wire[3:0] tmp47993;
    wire[4:0] tmp47994;
    wire[4:0] tmp47995;
    wire tmp47996;
    wire[4:0] tmp47997;
    wire[1:0] tmp47998;
    wire[1:0] tmp47999;
    wire[2:0] tmp48000;
    wire[4:0] tmp48001;
    wire[2:0] tmp48002;
    wire[4:0] tmp48003;
    wire[4:0] tmp48004;
    wire tmp48005;
    wire[4:0] tmp48006;
    wire[3:0] tmp48007;
    wire[3:0] tmp48008;
    wire tmp48009;
    wire[4:0] tmp48010;
    wire tmp48011;
    wire[4:0] tmp48012;
    wire[4:0] tmp48013;
    wire tmp48014;
    wire[4:0] tmp48015;
    wire[7:0] tmp48016;
    wire[4:0] tmp48017;
    wire tmp48018;
    wire[4:0] tmp48019;
    wire tmp48020;
    wire[4:0] tmp48021;
    wire tmp48022;
    wire tmp48023;
    wire tmp48024;
    wire tmp48025;
    wire tmp48026;
    wire tmp48027;
    wire tmp48028;
    wire tmp48029;
    wire tmp48030;
    wire tmp48031;
    wire[4:0] tmp48032;
    wire[3:0] tmp48033;
    wire[4:0] tmp48034;
    wire[5:0] tmp48035;
    wire[4:0] tmp48036;
    wire tmp48037;
    wire tmp48038;
    wire[2:0] tmp48039;
    wire[2:0] tmp48040;
    wire[2:0] tmp48041;
    wire[2:0] tmp48042;
    wire[3:0] tmp48043;
    wire[4:0] tmp48044;
    wire[3:0] tmp48045;
    wire[3:0] tmp48046;
    wire[2:0] tmp48047;
    wire[3:0] tmp48048;
    wire[4:0] tmp48049;
    wire[3:0] tmp48050;
    wire tmp48051;
    wire tmp48052;
    wire tmp48053;
    wire[3:0] tmp48054;
    wire[2:0] tmp48055;
    wire[3:0] tmp48056;
    wire tmp48057;
    wire tmp48058;
    wire tmp48059;
    wire tmp48060;
    wire tmp48061;
    wire tmp48062;
    wire tmp48063;
    wire tmp48064;
    wire tmp48065;
    wire tmp48066;
    wire tmp48067;
    wire tmp48068;
    wire tmp48069;
    wire tmp48070;
    wire tmp48071;
    wire tmp48072;
    wire tmp48073;
    wire tmp48074;
    wire[7:0] tmp48075;
    wire[7:0] tmp48076;
    wire[7:0] tmp48077;
    wire[7:0] tmp48078;
    wire[7:0] tmp48079;

    // Combinational
    assign const_6693_55 = 55;
    assign const_6694_0 = 0;
    assign const_6695_1 = 1;
    assign const_6696_1 = 1;
    assign const_6697_1 = 1;
    assign const_6698_0 = 0;
    assign const_6699_0 = 0;
    assign const_6700_8 = 8;
    assign const_6701_8 = 8;
    assign const_6702_0 = 0;
    assign const_6703_0 = 0;
    assign const_6704_0 = 0;
    assign const_6705_0 = 0;
    assign const_6706_0 = 0;
    assign const_6707_0 = 0;
    assign const_6708_0 = 0;
    assign const_6709_0 = 0;
    assign const_6710_0 = 0;
    assign const_6711_1 = 1;
    assign const_6712_0 = 0;
    assign const_6713_0 = 0;
    assign const_6714_0 = 0;
    assign const_6715_0 = 0;
    assign const_6716_2 = 2;
    assign const_6717_1 = 1;
    assign const_6718_0 = 0;
    assign const_6719_1 = 1;
    assign const_6720_0 = 0;
    assign const_6721_0 = 0;
    assign const_6722_0 = 0;
    assign const_6723_0 = 0;
    assign const_6724_0 = 0;
    assign const_6725_2 = 2;
    assign const_6726_1 = 1;
    assign const_6727_0 = 0;
    assign const_6728_1 = 1;
    assign const_6729_0 = 0;
    assign const_6730_0 = 0;
    assign const_6731_0 = 0;
    assign const_6732_4 = 4;
    assign const_6733_1 = 1;
    assign const_6734_0 = 0;
    assign const_6735_0 = 0;
    assign const_6736_0 = 0;
    assign const_6737_0 = 0;
    assign const_6738_1 = 1;
    assign const_6739_0 = 0;
    assign const_6740_0 = 0;
    assign const_6741_0 = 0;
    assign const_6742_0 = 0;
    assign const_6743_0 = 0;
    assign const_6744_1 = 1;
    assign const_6745_0 = 0;
    assign const_6746_0 = 0;
    assign const_6747_0 = 0;
    assign const_6748_0 = 0;
    assign const_6749_0 = 0;
    assign out47790 = tmp47790;
    assign out47791 = tmp47791;
    assign out47792 = tmp47792;
    assign tmp47784 = data_in;
    assign tmp47785 = weight_in;
    assign tmp47786 = accum_in;
    assign tmp47787 = weight_en;
    assign tmp47788 = data_en;
    assign tmp47789 = adder_en;
    assign tmp47793 = {tmp47790[7]};
    assign tmp47794 = {tmp47791[7]};
    assign tmp47795 = tmp47793 ^ tmp47794;
    assign tmp47796 = {tmp47790[6], tmp47790[5], tmp47790[4], tmp47790[3], tmp47790[2], tmp47790[1], tmp47790[0]};
    assign tmp47797 = {tmp47791[6], tmp47791[5], tmp47791[4], tmp47791[3], tmp47791[2], tmp47791[1], tmp47791[0]};
    assign tmp47798 = tmp47796 + tmp47797;
    assign tmp47799 = {const_6694_0};
    assign tmp47800 = {tmp47799, const_6693_55};
    assign tmp47801 = tmp47798 - tmp47800;
    assign tmp47802 = tmp47804;
    assign tmp47803 = {tmp47801[6], tmp47801[5], tmp47801[4], tmp47801[3], tmp47801[2], tmp47801[1], tmp47801[0]};
    assign tmp47804 = {tmp47795, tmp47803};
    assign tmp47805 = tmp47807;
    assign tmp47806 = tmp47808;
    assign tmp47807 = {tmp47802[7]};
    assign tmp47808 = {tmp47786[7]};
    assign tmp47809 = tmp47811;
    assign tmp47810 = tmp47812;
    assign tmp47811 = {tmp47802[6], tmp47802[5], tmp47802[4], tmp47802[3]};
    assign tmp47812 = {tmp47786[6], tmp47786[5], tmp47786[4], tmp47786[3]};
    assign tmp47813 = tmp47816;
    assign tmp47814 = tmp47818;
    assign tmp47815 = {tmp47802[2], tmp47802[1], tmp47802[0]};
    assign tmp47816 = {const_6695_1, tmp47815};
    assign tmp47817 = {tmp47786[2], tmp47786[1], tmp47786[0]};
    assign tmp47818 = {const_6696_1, tmp47817};
    assign tmp47819 = tmp47825;
    assign tmp47820 = tmp47826;
    assign tmp47821 = tmp47841;
    assign tmp47822 = tmp47829;
    assign tmp47823 = tmp47843;
    assign tmp47824 = tmp47845;
    assign tmp47825 = tmp47805 ^ tmp47806;
    assign tmp47826 = tmp47809 - tmp47810;
    assign tmp47827 = {tmp47820[4]};
    assign tmp47828 = {tmp47820[4]};
    assign tmp47829 = tmp47828 ? tmp47810 : tmp47809;
    assign tmp47830 = {tmp47820[3], tmp47820[2], tmp47820[1], tmp47820[0]};
    assign tmp47831 = {tmp47820[4]};
    assign tmp47832 = {tmp47820[3], tmp47820[2], tmp47820[1], tmp47820[0]};
    assign tmp47833 = ~tmp47832;
    assign tmp47834 = {const_6698_0, const_6698_0, const_6698_0};
    assign tmp47835 = {tmp47834, const_6697_1};
    assign tmp47836 = tmp47833 + tmp47835;
    assign tmp47837 = {tmp47836[3], tmp47836[2], tmp47836[1], tmp47836[0]};
    assign tmp47838 = {tmp47831, tmp47837};
    assign tmp47839 = {const_6699_0};
    assign tmp47840 = {tmp47839, tmp47830};
    assign tmp47841 = tmp47827 ? tmp47838 : tmp47840;
    assign tmp47842 = {tmp47820[4]};
    assign tmp47843 = tmp47842 ? tmp47813 : tmp47814;
    assign tmp47844 = {tmp47820[4]};
    assign tmp47845 = tmp47844 ? tmp47814 : tmp47813;
    assign tmp47846 = tmp47847;
    assign tmp47847 = {tmp47821[3], tmp47821[2], tmp47821[1], tmp47821[0]};
    assign tmp47848 = tmp47850;
    assign tmp47849 = tmp47846 > const_6700_8;
    assign tmp47850 = tmp47849 ? const_6701_8 : tmp47846;
    assign tmp47851 = {tmp47823, const_6702_0};
    assign tmp47852 = tmp47881;
    assign tmp47853 = {tmp47851[6], tmp47851[5], tmp47851[4], tmp47851[3], tmp47851[2], tmp47851[1], tmp47851[0]};
    assign tmp47854 = {tmp47853, const_6703_0};
    assign tmp47855 = {tmp47851[7], tmp47851[6], tmp47851[5], tmp47851[4], tmp47851[3], tmp47851[2], tmp47851[1]};
    assign tmp47856 = {const_6703_0, tmp47855};
    assign tmp47857 = const_6704_0 ? tmp47854 : tmp47856;
    assign tmp47858 = {tmp47848[0]};
    assign tmp47859 = tmp47858 ? tmp47857 : tmp47851;
    assign tmp47860 = {const_6703_0, const_6703_0};
    assign tmp47861 = {tmp47860[1], tmp47860[0]};
    assign tmp47862 = {tmp47859[5], tmp47859[4], tmp47859[3], tmp47859[2], tmp47859[1], tmp47859[0]};
    assign tmp47863 = {tmp47862, tmp47861};
    assign tmp47864 = {tmp47859[7], tmp47859[6], tmp47859[5], tmp47859[4], tmp47859[3], tmp47859[2]};
    assign tmp47865 = {tmp47861, tmp47864};
    assign tmp47866 = const_6704_0 ? tmp47863 : tmp47865;
    assign tmp47867 = {tmp47848[1]};
    assign tmp47868 = tmp47867 ? tmp47866 : tmp47859;
    assign tmp47869 = {tmp47861, tmp47861};
    assign tmp47870 = {tmp47869[3], tmp47869[2], tmp47869[1], tmp47869[0]};
    assign tmp47871 = {tmp47868[3], tmp47868[2], tmp47868[1], tmp47868[0]};
    assign tmp47872 = {tmp47871, tmp47870};
    assign tmp47873 = {tmp47868[7], tmp47868[6], tmp47868[5], tmp47868[4]};
    assign tmp47874 = {tmp47870, tmp47873};
    assign tmp47875 = const_6704_0 ? tmp47872 : tmp47874;
    assign tmp47876 = {tmp47848[2]};
    assign tmp47877 = tmp47876 ? tmp47875 : tmp47868;
    assign tmp47878 = {tmp47870, tmp47870};
    assign tmp47879 = {tmp47878[7], tmp47878[6], tmp47878[5], tmp47878[4], tmp47878[3], tmp47878[2], tmp47878[1], tmp47878[0]};
    assign tmp47880 = {tmp47848[3]};
    assign tmp47881 = tmp47880 ? tmp47879 : tmp47877;
    assign tmp47882 = {tmp47852[7], tmp47852[6], tmp47852[5], tmp47852[4]};
    assign tmp47883 = {tmp47852[3], tmp47852[2], tmp47852[1], tmp47852[0]};
    assign tmp47884 = tmp47887;
    assign tmp47885 = tmp47888;
    assign tmp47886 = tmp47894;
    assign tmp47887 = {tmp47883[3]};
    assign tmp47888 = {tmp47883[2]};
    assign tmp47889 = {tmp47883[1], tmp47883[0]};
    assign tmp47890 = {tmp47889[0]};
    assign tmp47891 = {tmp47890};
    assign tmp47892 = {tmp47889[1]};
    assign tmp47893 = {tmp47892};
    assign tmp47894 = tmp47891 | tmp47893;
    assign tmp47895 = tmp47910;
    assign tmp47896 = {const_6705_0};
    assign tmp47897 = {tmp47896, tmp47824};
    assign tmp47898 = {const_6706_0};
    assign tmp47899 = {tmp47898, tmp47882};
    assign tmp47900 = tmp47897 - tmp47899;
    assign tmp47901 = {const_6707_0};
    assign tmp47902 = {tmp47901, tmp47824};
    assign tmp47903 = {const_6708_0};
    assign tmp47904 = {tmp47903, tmp47882};
    assign tmp47905 = tmp47902 + tmp47904;
    assign tmp47906 = ~tmp47819;
    assign tmp47907 = {const_6710_0, const_6710_0, const_6710_0, const_6710_0, const_6710_0};
    assign tmp47908 = {tmp47907, const_6709_0};
    assign tmp47909 = tmp47819 ? tmp47900 : tmp47908;
    assign tmp47910 = tmp47906 ? tmp47905 : tmp47909;
    assign tmp47911 = tmp47912;
    assign tmp47912 = {tmp47895[5]};
    assign tmp47913 = tmp47921;
    assign tmp47914 = ~tmp47895;
    assign tmp47915 = {const_6712_0, const_6712_0, const_6712_0, const_6712_0, const_6712_0};
    assign tmp47916 = {tmp47915, const_6711_1};
    assign tmp47917 = tmp47914 + tmp47916;
    assign tmp47918 = {const_6713_0};
    assign tmp47919 = {tmp47918, tmp47895};
    assign tmp47920 = tmp47911 ? tmp47917 : tmp47919;
    assign tmp47921 = {tmp47920[4], tmp47920[3], tmp47920[2], tmp47920[1], tmp47920[0]};
    assign tmp47922 = {tmp47913[4]};
    assign tmp47923 = tmp47987;
    assign tmp47924 = {tmp47913[3], tmp47913[2], tmp47913[1], tmp47913[0]};
    assign tmp47925 = {tmp47924[3], tmp47924[2]};
    assign tmp47926 = {tmp47924[1], tmp47924[0]};
    assign tmp47927 = tmp47943;
    assign tmp47928 = {const_6715_0};
    assign tmp47929 = {tmp47928, const_6714_0};
    assign tmp47930 = tmp47925 == tmp47929;
    assign tmp47931 = {const_6718_0};
    assign tmp47932 = {tmp47931, const_6717_1};
    assign tmp47933 = tmp47925 == tmp47932;
    assign tmp47934 = ~tmp47930;
    assign tmp47935 = tmp47934 & tmp47933;
    assign tmp47936 = ~tmp47930;
    assign tmp47937 = ~tmp47933;
    assign tmp47938 = tmp47936 & tmp47937;
    assign tmp47939 = {const_6722_0};
    assign tmp47940 = {tmp47939, const_6721_0};
    assign tmp47941 = tmp47930 ? const_6716_2 : tmp47940;
    assign tmp47942 = tmp47935 ? const_6719_1 : tmp47941;
    assign tmp47943 = tmp47938 ? const_6720_0 : tmp47942;
    assign tmp47944 = tmp47960;
    assign tmp47945 = {const_6724_0};
    assign tmp47946 = {tmp47945, const_6723_0};
    assign tmp47947 = tmp47926 == tmp47946;
    assign tmp47948 = {const_6727_0};
    assign tmp47949 = {tmp47948, const_6726_1};
    assign tmp47950 = tmp47926 == tmp47949;
    assign tmp47951 = ~tmp47947;
    assign tmp47952 = tmp47951 & tmp47950;
    assign tmp47953 = ~tmp47947;
    assign tmp47954 = ~tmp47950;
    assign tmp47955 = tmp47953 & tmp47954;
    assign tmp47956 = {const_6731_0};
    assign tmp47957 = {tmp47956, const_6730_0};
    assign tmp47958 = tmp47947 ? const_6725_2 : tmp47957;
    assign tmp47959 = tmp47952 ? const_6728_1 : tmp47958;
    assign tmp47960 = tmp47955 ? const_6729_0 : tmp47959;
    assign tmp47961 = tmp47980;
    assign tmp47962 = tmp47978;
    assign tmp47963 = {tmp47927[1]};
    assign tmp47964 = {tmp47944[1]};
    assign tmp47965 = tmp47963 & tmp47964;
    assign tmp47966 = {tmp47944[0]};
    assign tmp47967 = {const_6733_1, tmp47966};
    assign tmp47968 = ~tmp47965;
    assign tmp47969 = tmp47968 & tmp47963;
    assign tmp47970 = {const_6734_0, tmp47927};
    assign tmp47971 = ~tmp47965;
    assign tmp47972 = ~tmp47963;
    assign tmp47973 = tmp47971 & tmp47972;
    assign tmp47974 = {const_6736_0, const_6736_0};
    assign tmp47975 = {tmp47974, const_6735_0};
    assign tmp47976 = tmp47965 ? const_6732_4 : tmp47975;
    assign tmp47977 = tmp47969 ? tmp47967 : tmp47976;
    assign tmp47978 = tmp47973 ? tmp47970 : tmp47977;
    assign tmp47979 = {const_6737_0};
    assign tmp47980 = {tmp47979, tmp47962};
    assign tmp47981 = {const_6739_0, const_6739_0, const_6739_0};
    assign tmp47982 = {tmp47981, const_6738_1};
    assign tmp47983 = tmp47961 + tmp47982;
    assign tmp47984 = {const_6741_0, const_6741_0, const_6741_0, const_6741_0};
    assign tmp47985 = {tmp47984, const_6740_0};
    assign tmp47986 = tmp47922 ? tmp47985 : tmp47983;
    assign tmp47987 = {tmp47986[3], tmp47986[2], tmp47986[1], tmp47986[0]};
    assign tmp47988 = tmp48021;
    assign tmp47989 = {const_6742_0};
    assign tmp47990 = {tmp47989, tmp47923};
    assign tmp47991 = {tmp47913[3], tmp47913[2], tmp47913[1], tmp47913[0]};
    assign tmp47992 = {tmp47991, const_6743_0};
    assign tmp47993 = {tmp47913[4], tmp47913[3], tmp47913[2], tmp47913[1]};
    assign tmp47994 = {const_6743_0, tmp47993};
    assign tmp47995 = const_6744_1 ? tmp47992 : tmp47994;
    assign tmp47996 = {tmp47990[0]};
    assign tmp47997 = tmp47996 ? tmp47995 : tmp47913;
    assign tmp47998 = {const_6743_0, const_6743_0};
    assign tmp47999 = {tmp47998[1], tmp47998[0]};
    assign tmp48000 = {tmp47997[2], tmp47997[1], tmp47997[0]};
    assign tmp48001 = {tmp48000, tmp47999};
    assign tmp48002 = {tmp47997[4], tmp47997[3], tmp47997[2]};
    assign tmp48003 = {tmp47999, tmp48002};
    assign tmp48004 = const_6744_1 ? tmp48001 : tmp48003;
    assign tmp48005 = {tmp47990[1]};
    assign tmp48006 = tmp48005 ? tmp48004 : tmp47997;
    assign tmp48007 = {tmp47999, tmp47999};
    assign tmp48008 = {tmp48007[3], tmp48007[2], tmp48007[1], tmp48007[0]};
    assign tmp48009 = {tmp48006[0]};
    assign tmp48010 = {tmp48009, tmp48008};
    assign tmp48011 = {tmp48006[4]};
    assign tmp48012 = {tmp48008, tmp48011};
    assign tmp48013 = const_6744_1 ? tmp48010 : tmp48012;
    assign tmp48014 = {tmp47990[2]};
    assign tmp48015 = tmp48014 ? tmp48013 : tmp48006;
    assign tmp48016 = {tmp48008, tmp48008};
    assign tmp48017 = {tmp48016[4], tmp48016[3], tmp48016[2], tmp48016[1], tmp48016[0]};
    assign tmp48018 = {tmp47990[3]};
    assign tmp48019 = tmp48018 ? tmp48017 : tmp48015;
    assign tmp48020 = {tmp47990[4]};
    assign tmp48021 = tmp48020 ? tmp48017 : tmp48019;
    assign tmp48022 = tmp48031;
    assign tmp48023 = {tmp47988[1]};
    assign tmp48024 = tmp47885 | tmp47886;
    assign tmp48025 = tmp47884 & tmp48024;
    assign tmp48026 = ~tmp47885;
    assign tmp48027 = tmp47884 & tmp48026;
    assign tmp48028 = ~tmp47886;
    assign tmp48029 = tmp48027 & tmp48028;
    assign tmp48030 = tmp48029 & tmp48023;
    assign tmp48031 = tmp48025 | tmp48030;
    assign tmp48032 = tmp48036;
    assign tmp48033 = {const_6745_0, const_6745_0, const_6745_0, const_6745_0};
    assign tmp48034 = {tmp48033, tmp48022};
    assign tmp48035 = tmp47988 + tmp48034;
    assign tmp48036 = {tmp48035[4], tmp48035[3], tmp48035[2], tmp48035[1], tmp48035[0]};
    assign tmp48037 = tmp48038;
    assign tmp48038 = {tmp48032[4]};
    assign tmp48039 = tmp48042;
    assign tmp48040 = {tmp48032[3], tmp48032[2], tmp48032[1]};
    assign tmp48041 = {tmp48032[2], tmp48032[1], tmp48032[0]};
    assign tmp48042 = tmp48037 ? tmp48040 : tmp48041;
    assign tmp48043 = tmp48045;
    assign tmp48044 = tmp47822 - tmp47923;
    assign tmp48045 = {tmp48044[3], tmp48044[2], tmp48044[1], tmp48044[0]};
    assign tmp48046 = tmp48050;
    assign tmp48047 = {const_6746_0, const_6746_0, const_6746_0};
    assign tmp48048 = {tmp48047, tmp48037};
    assign tmp48049 = tmp48043 + tmp48048;
    assign tmp48050 = {tmp48049[3], tmp48049[2], tmp48049[1], tmp48049[0]};
    assign tmp48051 = tmp48074;
    assign tmp48052 = tmp47805 ^ tmp47806;
    assign tmp48053 = ~tmp48052;
    assign tmp48054 = {tmp47821[3], tmp47821[2], tmp47821[1], tmp47821[0]};
    assign tmp48055 = {const_6748_0, const_6748_0, const_6748_0};
    assign tmp48056 = {tmp48055, const_6747_0};
    assign tmp48057 = tmp48054 == tmp48056;
    assign tmp48058 = tmp47911 ^ tmp47805;
    assign tmp48059 = ~tmp48053;
    assign tmp48060 = tmp48059 & tmp48057;
    assign tmp48061 = {tmp47821[4]};
    assign tmp48062 = ~tmp48053;
    assign tmp48063 = ~tmp48057;
    assign tmp48064 = tmp48062 & tmp48063;
    assign tmp48065 = tmp48064 & tmp48061;
    assign tmp48066 = ~tmp48053;
    assign tmp48067 = ~tmp48057;
    assign tmp48068 = tmp48066 & tmp48067;
    assign tmp48069 = ~tmp48061;
    assign tmp48070 = tmp48068 & tmp48069;
    assign tmp48071 = tmp48053 ? tmp47805 : const_6749_0;
    assign tmp48072 = tmp48060 ? tmp48058 : tmp48071;
    assign tmp48073 = tmp48065 ? tmp47806 : tmp48072;
    assign tmp48074 = tmp48070 ? tmp47805 : tmp48073;
    assign tmp48075 = tmp48076;
    assign tmp48076 = {tmp48051, tmp48046, tmp48039};
    assign tmp48077 = tmp47788 ? tmp47784 : tmp47790;
    assign tmp48078 = tmp47787 ? tmp47785 : tmp47791;
    assign tmp48079 = tmp47789 ? tmp48075 : tmp47792;

    // Registers
    always @(posedge clk)
    begin
        if (rst) begin
            tmp47790 <= 0;
            tmp47791 <= 0;
            tmp47792 <= 0;
        end
        else begin
            tmp47790 <= tmp48077;
            tmp47791 <= tmp48078;
            tmp47792 <= tmp48079;
        end
    end

endmodule

